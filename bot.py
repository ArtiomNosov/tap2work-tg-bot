import configparser
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from rate_limit import RateLimitMiddleware
from collections import defaultdict
from typing import DefaultDict


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ config.ini
config = configparser.ConfigParser()
config.read('config_my.ini')
TOKEN = config['bot']['token']
ADMIN_CHAT_ID = int(config['bot']['admin_id'])
SPAM_WARNING_LIMIT = int(config['bot'].get('spam_warning_limit', 20))
SPAM_BLOCK_LIMIT = int(config['bot'].get('spam_block_limit', 200))
SPAM_INTERVAL_SECONDS = int(config['bot'].get('SPAM_INTERVAL_SECONDS', 3))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(RateLimitMiddleware(
    interval_seconds=SPAM_INTERVAL_SECONDS,
    warning_limit=SPAM_WARNING_LIMIT,
    block_limit=SPAM_BLOCK_LIMIT,
    admin_chat_id=ADMIN_CHAT_ID
))


class JobSearchStates(StatesGroup):
    waiting_for_vacancy_link = State()
    waiting_for_resume = State()

class SupportStates(StatesGroup):
    collecting_messages = State()

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(
    KeyboardButton("üîπ –•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"),
    KeyboardButton("üîπ –•–æ—á—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
)
keyboard.add(
    KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
    KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
)

support_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
support_keyboard.add(KeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"))
support_keyboard.add(KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))

user_daily_counts: DefaultDict[int, dict[str, object]] = defaultdict(
    lambda: {"count": 0, "last_seen": datetime.now()}
)
blocked_users = set()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ tap2work ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –≥–¥–µ –ª—é–¥–∏ –ø–æ–º–æ–≥–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É –±—ã—Å—Ç—Ä–µ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
    "–•–æ—á–µ—à—å –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é –º–µ—á—Ç—ã? –û—Ç–ø—Ä–∞–≤—å –≤–∞–∫–∞–Ω—Å–∏—é ‚Äî –∏ —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç.\n"
    "–ì–æ—Ç–æ–≤ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Å–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é? –ü–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
    "üìå –ú—ã **–Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–Ω–µ —É–∫–∞–∑—ã–≤–∞–π –§–ò–û, email, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –¥—Ä—É–≥–∏–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**.\n"
    "–¢–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ ‚Äî —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.\n\n"
    "‚ö†Ô∏è –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ (–≤—ã–π–¥–∏ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /start). "
    "–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
    "üëá –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:"
)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(WELCOME_MESSAGE, reply_markup=keyboard, parse_mode="Markdown")

@dp.message_handler(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", state="*")
async def return_to_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.reply(WELCOME_MESSAGE, reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def start_support(message: types.Message, state: FSMContext):
    await state.set_state(SupportStates.collecting_messages)
    await state.update_data(messages=[])
    await message.reply(
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω–µ —Ç–∞–∫ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "–ö–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ* –Ω–∏–∂–µ üëá",
        reply_markup=support_keyboard,
        parse_mode="Markdown"
    )

@dp.message_handler(state=SupportStates.collecting_messages, content_types=types.ContentTypes.ANY)
async def collect_support_message(message: types.Message, state: FSMContext):
    if message.text and message.text.strip().lower() in {"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úÖ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}:
        data = await state.get_data()
        messages = data.get("messages", [])
        username = message.from_user.username or message.from_user.full_name

        await bot.send_message(ADMIN_CHAT_ID, f"üì© –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @{username}:")
        for msg in messages:
            if msg.text:
                await bot.send_message(ADMIN_CHAT_ID, f"üìù {msg.text}")
            elif msg.document:
                await bot.send_document(ADMIN_CHAT_ID, msg.document.file_id, caption=msg.caption or "")
            elif msg.photo:
                await bot.send_photo(ADMIN_CHAT_ID, msg.photo[-1].file_id, caption=msg.caption or "")

        await message.reply("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ!", reply_markup=keyboard)
        await prompt_to_continue(message)
        await state.finish()
    else:
        data = await state.get_data()
        messages = data.get("messages", [])
        messages.append(message)
        await state.update_data(messages=messages)

@dp.message_handler(lambda message: message.text == "üîπ –•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é")
async def handle_recommendation_request(message: types.Message):
    await message.reply(
    "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. "
    "–ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ø–∞—Å—Ç—å üôÇ"
    )
    await JobSearchStates.waiting_for_vacancy_link.set()

@dp.message_handler(state=JobSearchStates.waiting_for_vacancy_link, content_types=types.ContentType.TEXT)
async def collect_vacancy_description(message: types.Message, state: FSMContext):
    vacancy_info = message.text.strip()
    await state.update_data(vacancy_url=vacancy_info)

    await message.reply(
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ *–æ–±–µ–∑–ª–∏—á–µ–Ω–Ω–æ–µ –º–∏–Ω–∏-—Ä–µ–∑—é–º–µ*.\n"
        "üìå –£–∫–∞–∂–∏ —Å–≤–æ–π –æ–ø—ã—Ç, –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, —Å—Ç–µ–∫, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî –Ω–æ **–±–µ–∑ –§–ò–û –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**.\n\n"
        "‚ùóÔ∏è–≠—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–º, –∫—Ç–æ —Å–º–æ–∂–µ—Ç –¥–∞—Ç—å —Ç–µ–±–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.",
        parse_mode="Markdown"
    )
    await JobSearchStates.waiting_for_resume.set()

@dp.message_handler(lambda message: message.text == "üîπ –•–æ—á—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
async def handle_candidate_offer(message: types.Message):
    username = message.from_user.username or message.from_user.full_name

    await bot.send_message(
        ADMIN_CHAT_ID,
        f"üë§ @{username} —Ö–æ—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."
    )

    await message.reply("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–¥–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ üôå")
    await prompt_to_continue(message)

async def prompt_to_continue(message: types.Message):
    await message.reply(
        "üìå –¢—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å, —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å –∏–ª–∏ –≤ —á—ë–º –Ω—É–∂–¥–∞–µ—à—å—Å—è üëá",
        reply_markup=keyboard
    )

@dp.message_handler(state=JobSearchStates.waiting_for_resume, content_types=types.ContentType.TEXT)
async def handle_text_resume(message: types.Message, state: FSMContext):
    data = await state.get_data()
    vacancy_url = data.get("vacancy_url")
    resume_text = message.text.strip()
    username = message.from_user.username or message.from_user.full_name

    admin_message = (
        f"üì© –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç @{username}:\n\n"
        f"üìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy_url}\n\n"
        f"üìÑ –ú–∏–Ω–∏-—Ä–µ–∑—é–º–µ:\n{resume_text}"
    )

    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)

    await message.reply("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–≤–æ—ë –º–∏–Ω–∏-—Ä–µ–∑—é–º–µ. –° —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.")
    await prompt_to_continue(message)
    await state.finish()

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def fallback_handler(message: types.Message):
    await process_message(message)


async def process_message(message: types.Message):
    # –°—é–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω—é—é –ª–æ–≥–∏–∫—É –∏–∑ handle_unexpected_message
    username = message.from_user.username or message.from_user.full_name

    if message.text:
        await bot.send_message(ADMIN_CHAT_ID, f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}:\n\n{message.text}")
    elif message.document:
        await bot.send_document(ADMIN_CHAT_ID, message.document.file_id, caption=f"üì• –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç @{username}")
    elif message.photo:
        await bot.send_photo(ADMIN_CHAT_ID, message.photo[-1].file_id, caption=f"üì• –§–æ—Ç–æ –æ—Ç @{username}")
    else:
        await bot.send_message(ADMIN_CHAT_ID, f"üì• –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @{username}")

    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º üëå")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
